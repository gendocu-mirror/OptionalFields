/* eslint-disable */
/*Generated by GenDocu.com*/
// package: v1
// file: main.proto

import * as jspb from "google-protobuf";

export class ExampleMessage1 extends jspb.Message {
  hasMystring(): boolean;
  clearMystring(): void;
  getMystring(): string;
  setMystring(value: string): void;

  hasOptionalBool(): boolean;
  clearOptionalBool(): void;
  getOptionalBool(): boolean;
  setOptionalBool(value: boolean): void;

  getRegularBool(): boolean;
  setRegularBool(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ExampleMessage1.AsObject;
  static toObject(includeInstance: boolean, msg: ExampleMessage1): ExampleMessage1.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ExampleMessage1, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ExampleMessage1;
  static deserializeBinaryFromReader(message: ExampleMessage1, reader: jspb.BinaryReader): ExampleMessage1;
}

export namespace ExampleMessage1 {
  export type AsObject = {
    mystring: string,
    optionalBool: boolean,
    regularBool: boolean,
  }
}

export class ExampleMessage2 extends jspb.Message {
  getMyint(): number;
  setMyint(value: number): void;

  hasNested(): boolean;
  clearNested(): void;
  getNested(): ExampleMessage2.ExampleNested | undefined;
  setNested(value?: ExampleMessage2.ExampleNested): void;

  hasM3(): boolean;
  clearM3(): void;
  getM3(): ExampleMessage1 | undefined;
  setM3(value?: ExampleMessage1): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ExampleMessage2.AsObject;
  static toObject(includeInstance: boolean, msg: ExampleMessage2): ExampleMessage2.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ExampleMessage2, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ExampleMessage2;
  static deserializeBinaryFromReader(message: ExampleMessage2, reader: jspb.BinaryReader): ExampleMessage2;
}

export namespace ExampleMessage2 {
  export type AsObject = {
    myint: number,
    nested?: ExampleMessage2.ExampleNested.AsObject,
    m3?: ExampleMessage1.AsObject,
  }

  export class ExampleNested extends jspb.Message {
    getData(): Uint8Array | string;
    getData_asU8(): Uint8Array;
    getData_asB64(): string;
    setData(value: Uint8Array | string): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ExampleNested.AsObject;
    static toObject(includeInstance: boolean, msg: ExampleNested): ExampleNested.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ExampleNested, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ExampleNested;
    static deserializeBinaryFromReader(message: ExampleNested, reader: jspb.BinaryReader): ExampleNested;
  }

  export namespace ExampleNested {
    export type AsObject = {
      data: Uint8Array | string,
    }
  }
}

export class ReturnType extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ReturnType.AsObject;
  static toObject(includeInstance: boolean, msg: ReturnType): ReturnType.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ReturnType, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ReturnType;
  static deserializeBinaryFromReader(message: ReturnType, reader: jspb.BinaryReader): ReturnType;
}

export namespace ReturnType {
  export type AsObject = {
  }
}

